// ============================================================================
// The default profile
// ============================================================================

Profile {
	// Supply {
		// resource = Hydrogen
		// low_message = #KERBALISM_low_hydrogen
		// empty_message = #KERBALISM_empty_hydrogen
		// refill_message = #KERBALISM_refill_hydrogen
	// }

	// Supply {
		// resource = Ammonia
		// low_message = #KERBALISM_low_ammonia
		// empty_message = #KERBALISM_empty_ammonia
		// refill_message = #KERBALISM_refill_ammonia
	// }

	// //convention: 1 capacity = enough to compress output of 1 crew member
	// Process {
		// name = waste compressor
		// title = #KERBALISM_Process_WasteCompressor
		// modifier = _WasteCompressor
		// input = ElectricCharge@1.2
		// input = Waste@0.0000045525
		// output = Shielding@0.00000001602982
	// }
	// RESOURCE_DEFINITION {
		// name = _WasteCompressor
		// density = 0.0
		// isVisible = false
	// }

	// // convention: 1 capacity = enough to process output of 1 crew member
	// Process {
		// name = waste processor
		// title = #KERBALISM_Process_WasteProcessor
		// modifier = _WasteProcessor
		// input = ElectricCharge@0.065556
		// input = Waste@0.0000045525
		// // According to https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4500995/ feces contains approximately 0.7% nitrogen.
		// // Feces is considered to the dominant source of Waste
		// // Waste is 975.3 times more dense than Ammonia
		// output = Ammonia@0.000031083125
	// }
	// RESOURCE_DEFINITION {
		// name = _WasteProcessor
		// density = 0.0
		// isVisible = false
	// }

	// Process {
		// name = hydrazine production N2 injection   // NitroPeroxide process
		// title = #KERBALISM_Process_HydrazineProductionN2
		// modifier = _NitroHydrazine
		// input = ElectricCharge@0.059678961  // calculated using 6.99 J/(g K) (sustained heating to 460K)
		// input = Ammonia@4.7203389609
		// input = Oxidizer@0.0014500000   // (HydrogenPeroxide@0.0050000000) Note that Oxidizer has a density of 5Kg/Unit
		// input = Nitrogen@3.5796568216
		// output = Oxygen@4.8371125902
		// output = MonoPropellant@0.0021344406   // (Hydrazine@0.0085037476) Note that MonoPropellant has a density of 4Kg/Unit
		// dump_valve = Oxygen,MonoPropellant
	// }

	// Process {
		// name = molten regolith electrolysis
		// title = #KERBALISM_Process_MoltenRegolithElectrolysis
		// modifier = _MRE
		// input = ElectricCharge@2.0 // 2 kW MRE reactor at 2300 K with heat corrosion resistant crucible
		// input = Ore@0.00006342
		// output = Oxygen@0.088843           // 42% of regolith is O2
		// output = CarbonDioxide@0.00444215  // approx 2% of regolith is CO2, released in the pre-heating stage @950K
		// output = Shielding@0.000000112     // makes Shielding out of waste Slag
		// dump_valve = Shielding&CarbonDioxide,Shielding,Shielding&Oxygen,CarbonDioxide,Oxygen,CarbonDioxide&Oxygen
	// }
}

// ============================================================================
// Add Part Upgrade for upgradeable slots
// ============================================================================

// PARTUPGRADE:NEEDS[ProfileDefault]
// {
  // name = Upgrade-Slots
  // partIcon = kerbalism-chemicalplant
  // techRequired = electronics
  // entryCost = 20000
  // title = #KERBALISM_Upgrade_Slots_title//Life support and Chemical plant slot upgrade
  // manufacturer = Lambda Aerospace
  // description = #KERBALISM_Upgrade_Slots_desc//Adds an additional configurable slot to Manned pods, ECLSS module and Chemical plants.
// }


// ============================================================================
// Add configurable Life Support System to all manned parts
// ============================================================================

// @PART[*]:HAS[#CrewCapacity[>0],!MODULE[KerbalSeat]]:NEEDS[ProfileDefault]:FOR[KerbalismDefault] {
	// MODULE {
		// name = ProcessController
		// resource = _WasteProcessor
		// title = #KERBALISM_WasteProcessor_title//Waste processor
		// capacity = #$/CrewCapacity$
		// running = true
	// }

	// MODULE {
		// name = Configure
		// title = Pod
		// slots = 2

		// UPGRADES {
			// UPGRADE {
				// name__ = Upgrade-Slots
				// techRequired__ = electronics
				// slots = 0
			// }
		// }

		// SETUP {
			// name = Waste Processor
			// desc = #KERBALISM_WasteProcessor_desc//Extract <b>Ammonia</b> out of decomposing organic <b>Waste</b>.
			// tech = advExploration
			// mass = 0.05
			// cost = 500

			// MODULE {
				// type = ProcessController
				// id_field = resource
				// id_value = _WasteProcessor
			// }

			// RESOURCE {
				// name = Waste
				// amount = 0
				// maxAmount = #$/CrewCapacity$
				// @maxAmount *= 5
			// }
		// }
	// }
// }



// ============================================================================
// Add configurable Life Support System to Life Support Unit part
// ============================================================================

// @PART[kerbalism-lifesupportmodule]:NEEDS[ProfileDefault]:FOR[KerbalismDefault] {
	// MODULE {
		// name = Configure
		// title = Life Support
		// slots = 2

		// UPGRADES {
			// UPGRADE {
				// name__ = Upgrade-Slots
				// techRequired__ = electronics
				// slots = 0
			// }
		// }
	// }
// }


// ============================================================================
// Setup greenhouse
// ============================================================================

@PART[kerbalism-greenhouse]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  MODULE
  {
    name = Greenhouse
    // Please note the Greenhouse is its own process and does not work like the standard processes, for example the WasteAtmosphere and
	// CarbonDioxide INPUT_RESOURCE parameters work together and can internally interchange information depending on conditions, see below.

    crop_resource = Food                // name of resource produced by harvests
    // Based on design targets from Prototype Lunar Greenhouse (see https://www.ag.arizona.edu/lunargreenhouse/MidReviews.htm ):
    // Design targets are on slide 18 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
    // Prototype Lunar Greenhouse geometry can be found on slide 14 of https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf
    // Much larger design for producing food for 6 people can be found here (values not used): https://www.degruyter.com/downloadpdf/j/opag.2017.2.issue-1/opag-2017-0011/opag-2017-0011.pdf
    // This Greenhouse is assumed to have 24 m^3 volume dedicated to food production (all greenhouses in mod support files are calculated relative to this one).
    // This Greenhouse is intended to support 0.5 Kerbal just like the Prototype Lunar Greenhouse.
    // Harvest time is 200 days, but in order to avoid micromanagement this greenhouse supports 0.5 Kerbal for 210 days.
    // Kerbals need 52.5 food per 200 days, converted to 210 days that is 55.125 food.
    crop_size = 27.5625                 // amount of resource produced by harvests
    crop_rate = 0.00000023148           // growth per second when all conditions apply, a fully grown crop equals value of 1.0
    ec_rate = 2.5                       // EC/s consumed by the lamp at max intensity

    light_tolerance = 400.0             // minimum lighting flux required for growth, in W/m^2
    pressure_tolerance = 0.1            // minimum pressure required for growth, in sea level atmospheres
    radiation_tolerance = 0.000008333   // maximum radiation allowed for growth in rad/s, considered after shielding is applied

    lamps = Cylinder001                 // object with emissive texture used to represent lamp intensity graphically
    shutters = door                     // animation to manipulate shutters
    plants =                            // animation to represent plant growth graphically

    INPUT_RESOURCE
    {
      name = Ammonia
      rate = 0.000095703125             // 15 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 6 hours * rate == 15 * crop_size
    }

    // Photosynthesis reaction: 2xH2O + CO2 -> O2 + CH2O + H2O
    // Note that CH2O is an intermediate carbohydrate, energy that goes into the food, in the actual food it can be any CxHyOz compound

    // In a hydroponic system plants grow in water containing nutrients, the system is assumed to be closed loop.
    // Therefore only the water loss during photosynthesis is modeled.

    // Water efficient foods require around 250-500 L water per kg of crop (see https://www.theguardian.com/news/datablog/2013/jan/10/how-much-water-food-production-waste)
    // In a regenerative system (see https://www.ag.arizona.edu/lunargreenhouse/Documents/2012-07-20_01_Giacomelli.pdf slide 19) water is also produced.
    // In this example effective water consumption is 4.3 L per day. Every day approximately 2.4 kg of biomass is produced (not all of which can be eaten).
    // In this example the effective water consumption per kg of biomass is 1.8 L/kg.
    // TODO: Figure out what percentage of biomass actually becomes Food.
    // TODO: Figure how to recover the non-eatable biomass.
    // 1 unit of Food has a mass 0.28 kg (see community resource pack), therefore we will use 1.8 L/kg * 0.28 kg = 0.5 L of Water
    // 1 unit of Water matches 1 L, so we need 0.5 units of Water per unit of Food.
    INPUT_RESOURCE
    {
      name = Water
      rate = 0.0000031901         // 0.5 units required per unit of crop, i.e. 200 days * 3600 seconds per hour * 6 hours * rate == 0.5 * crop_size
    }

    INPUT_RESOURCE
    {
      name = WasteAtmosphere      // Plants work on WasteAtmosphere and replace a scrubber, if not enough WasteAtmosphere exists then CO2 is used
      rate = 0.00124579975        // Matched to a Kerbals WasteAtmosphere output which is 75% of required CO2 for crops according to documents linked above
    }                             // WasteAtmosphere has the same density as CO2

    INPUT_RESOURCE
    {
      name = CarbonDioxide        // Kerbals don't provide enough WasteAtmosphere for their required food production. If excess WasteAtmosphere is
                                  // present then it will be used in place of CO2 injection
      rate = 0.000415266575       // Remaining 25% of CO2 required.
    }

    // Note. if there is a deficiency in the amount of WasteAtmosphere needed then the missing amount of WasteAtmosphere will be added to the
    // CarbonDioxide input and Vies Versa if not enough CarbonDioxide is present and there is extra WasteAtmosphere.
    // If there is not enough resources then the plants will suffer.

    OUTPUT_RESOURCE
    {
      name = Oxygen
      rate = 0.00172379825              // 100% of oxygen required by 1 crew member, based on Prototype Lunar Greenhouse design targets
    }                                   // (percentage is factor 2 larger than food)
  }

  MODULE
  {
    name = ProcessController
    resource = _PressureControl
    title = #KERBALISM_PressureControl_title//Pressure control
    capacity = 0.2143
    running = true
  }

  RESOURCE
  {
    name = Ammonia
    amount = 272             // enough for 202 days including reclaimed ammonia from wastes, one crop cycle, two greenhouses combined
    maxAmount = 272
  }

  // CarbonDioxide is provided because humans don't provide enough CO2 for their required food production
  // Both https://www.space.com/9353-lunar-greenhouse-grow-food-future-moon-colonies.html and
  // https://www.degruyter.com/downloadpdf/j/opag.2017.2.issue-1/opag-2017-0011/opag-2017-0011.pdf
  // mention CO2 injection despite being closed loop systems.
  RESOURCE
  {
    name = CarbonDioxide
    amount = 4500            // enough for 202 days of CO2 injection (25% of total CO2 required), one crop cycle, two greenhouses combined
    maxAmount = 4500
  }

  // To support the pressure control
  RESOURCE
  {
    name = Nitrogen
    amount = 10000           // enough for 201 days , one crop cycle
    maxAmount = 10000
  }

  RESOURCE
  {
    name = Water
    amount = 11              // enough for 208 days including reclaimed water from wastes, one crop cycle, two greenhouses combined
    maxAmount = 11
  }
}



// You get a slot upgrade, and you get a slot upgrade, EVERYONE gets a slot upgrade!
// Had to fix unintended shenenigans, assuming whoever patched this initially never expected multiple configures on the same part.
@PART[*]:HAS[@MODULE[Configure]]:NEEDS[ProfileDefault]:FOR[zzzKerbalismDefault]
{ 	@MODULE[Configure]:HAS[#title[Pod]] 			{ @UPGRADES { @UPGRADE:HAS[#name__[Upgrade?Slots]] { @slots = #$../../slots$
      @slots += 1 } } }
	@MODULE[Configure]:HAS[#title[Life?Support]] 	{ @UPGRADES { @UPGRADE:HAS[#name__[Upgrade?Slots]] { @slots = #$../../slots$
      @slots += 1 } } }
	@MODULE[Configure]:HAS[#title[Chemical?Plant]] 	{ @UPGRADES { @UPGRADE:HAS[#name__[Upgrade?Slots]] { @slots = #$../../slots$
      @slots += 1 } } }
}

// tweak number of slots
@PART[MK1CrewCabin|Mark2Cockpit|cupola]:NEEDS[ProfileDefault]:FOR[zzzKerbalismDefault] 		{ @MODULE[Configure]:HAS[#title[Pod]] { @slots = 1 } }
@PART[mk3Cockpit_Shuttle]:NEEDS[ProfileDefault]:FOR[zzzKerbalismDefault] 						{ @MODULE[Configure]:HAS[#title[Pod]] { @slots = 3 } }




// ============================================================================
// Habitats
// ============================================================================

@PART[kerbalism-gravityring]:NEEDS[ProfileDefault]:FOR[KerbalismDefault]
{
  %CrewCapacity = 6
}

// ============================================================================
// Pseudo-resources used by processes
// ============================================================================





// sickbay

RESOURCE_DEFINITION
{
  name = _SickbayRDU
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SickbayTV
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SickbayShower
  density = 0.0
  isVisible = false
}

RESOURCE_DEFINITION
{
  name = _SickbayLaundry
  density = 0.0
  isVisible = false
}

// adding mass to a kerbal leads to all sorts of oddities in KSP.
// 1. the crew mass isn't accounted for in the editor immediately after adding/removing crew.
//    you have to make an additional change to the vessel for the numbers to add up.
// 2. a kerbal on EVA already has a mass of > 100kg in stock. the crew mass would be ADDED to that.
//    this would produce 95k of mass out of nothing for each EVA.
// it's convoluted, and I won't bother messing around with that any more.
//@PHYSICSGLOBALS:FOR[KerbalismDefault]
//{
//    %kerbalCrewMass = 0.09375
//}

