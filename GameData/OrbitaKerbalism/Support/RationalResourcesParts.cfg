// Compatibility patches for RationalResourcesParts

// Convert Hydro Scoop
@PART[rr_hydroscoop_temp]:FOR[OrbitaKerbalism]:NEEDS[RationalResourcesParts] {
	!MODULE[ModuleResourceIntake] {}
	!RESOURCE[IntakeAir] {}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[HydrogenPeroxide]/density$
		@ResourceName = HydrogenPeroxide
		@ConverterName = #OrbitaLoc_LqdScp_HydrogenPeroxide_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_HydrogenPeroxide_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_HydrogenPeroxide_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_HydrogenPeroxide_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[HydrogenPeroxide]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[Kerosene]/density$
		@ResourceName = Kerosene
		@ConverterName = #OrbitaLoc_LqdScp_Kerosene_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_Kerosene_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_Kerosene_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_Kerosene_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[Kerosene]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[LqdMethane]/density$
		@ResourceName = LqdMethane
		@ConverterName = #OrbitaLoc_LqdScp_LqdMethane_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_LqdMethane_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_LqdMethane_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_LqdMethane_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[LqdMethane]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[LqdOxygen]/density$
		@ResourceName = LqdOxygen
		@ConverterName = #OrbitaLoc_LqdScp_LqdOxygen_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_LqdOxygen_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_LqdOxygen_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_LqdOxygen_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[LqdOxygen]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[Salts]/density$
		@ResourceName = Salts
		@ConverterName = #OrbitaLoc_LqdScp_Salts_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_Salts_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_Salts_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_Salts_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[Salts]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	@MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		// @Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		// @Efficiency /= #$@RESOURCE_DEFINITION[Water]/density$
		// @ResourceName = Water
		@ConverterName = #OrbitaLoc_LqdScp_Water_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_Water_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_Water_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_Water_ToggleActionName
	 	// @INPUT_RESOURCE
	 	// {
			// @Ratio *= #$@RESOURCE_DEFINITION[Water]/density$
			// @Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	// }
	}
}

// Convert Exo Scoop
@PART[rr_exoscoop]:FOR[OrbiaKerbalism]:NEEDS[RationalResourcesParts] {
	@TechRequired = experimentalScience
	@entryCost = 29000
	@cost = 94000
	// @title = RR Particle Scoop
	// @manufacturer = Kenron
	// @description = Apparently someone went wild with a very large heap of discarded laundry baskets and a shed load of Copper wire. This device can generate a conical magnetic field modestly larger than its physical frame, enabling effective uptake of gaseous particles into the filtration system which then leads to the best part... refilling the tank.
	// @tags = helium hydrogen harvest scoop particle
	MODULE {
		name = ModuleSpaceDustHarvester
		PowerCost = #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/PowerCost$
		@PowerCost /= #$@PART[spacedust-atmosphere-processor-125-1]/MODULE[ModuleSpaceDustHarvester]/PowerCost$
		@PowerCost *= #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/PowerCost$
		HarvestType = Exosphere
		IntakeArea = #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeArea$
		@IntakeArea /= #$@PART[spacedust-atmosphere-processor-125-1]/MODULE[ModuleSpaceDustHarvester]/IntakeArea$
		@IntakeArea *= #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeArea$
		IntakeSpeedStatic = #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeSpeedStatic$
		@IntakeSpeedStatic /= #$@PART[spacedust-atmosphere-processor-125-1]/MODULE[ModuleSpaceDustHarvester]/IntakeSpeedStatic$
		@IntakeSpeedStatic *= #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeSpeedStatic$
		IntakeVelocityScale {
		  key = 0 1
		}
		HARVESTED_RESOURCE {
			Name = Ammonia
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE[ArgonGas]:NEEDS[NearFuturePropulsion] {
			Name = ArgonGas
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = CarbonDioxide
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Hydrogen
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Methane
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Nitrogen
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Oxygen
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Water
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = XenonGas
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
	}
}

// Convert Metal Boosters
@PART[RREngineSRB_RT05,RREngineSRB_RT10]:NEEDS[RationalResourcesParts] {
	@MODULE[ModuleEnginesFX] {
		alMultiplier = #$@RESOURCE_DEFINITION[Metals]/density$
		@alMultiplier /= #$@RESOURCE_DEFINITION[Aluminium]/density$
		@PROPELLANT[Metals] {
			@name = Aluminium
			@ratio *= #$../alMultiplier$
		}
		oxMultiplier = #$@RESOURCE_DEFINITION[Oxidizer]/density$
		@oxMultiplier /= #$@RESOURCE_DEFINITION[LqdOxygen]/density$
		@PROPELLANT[Oxidizer] {
			@name = LqdOxygen
			@ratio *= #$../oxMultiplier$
		}
	}
	wetMass = #$/RESOURCE[Metals]/maxAmount$
	@wetMass *= #$@RESOURCE_DEFINITION[Metals]/density$
	@RESOURCE[Metals] {
		@name = Aluminium
		@amount = #$/wetMass$
		@amount /= #$@RESOURCE_DEFINITION[Aluminium]/density$
		@maxAmount = #$amount$
	}
}

// Remove LqdCarbonMonoxide from LV-N-O
@PART[RREngineNERVA-O]:AFTER[RationalResourcesParts] {
	@MODULE[ModuleB9PartSwitch] {
		!SUBTYPE[CarbonM] {}
	}
}

// Convert Processors
// Condensers
@PART[rr_boxblue_flat] {
	input = #$/MODULE[ModuleResourceConverter]:HAS[@INPUT_RESOURCE:HAS[#ResourceName[Ammonia]]/INPUT_RESOURCE:HAS[#ResourceName[Ammonia]]/Ratio$
	@input *= #$@RESOURCE_DEFINITION[Ammonia]/density$
	output = #$/MODULE[ModuleResourceConverter]:HAS[@INPUT_RESOURCE:HAS[#ResourceName[Ammonia]]/OUTPUT_RESOURCE:HAS[#ResourceName[LqdAmmonia]]/Ratio$
	@output *= #$@RESOURCE_DEFINITION[LqdAmmonia]/density$
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_NH3Condenser_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_NH3Condenser_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_NH3Condenser_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_NH3Condenser_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = Ammonia
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[Ammonia]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 20
		}
		OUTPUT_RESOURCE {
			ResourceName = LqdAmmonia
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdAmmonia]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_CO2Condenser_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_CO2Condenser_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_CO2Condenser_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_CO2Condenser_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = CarbonDioxide
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[CarbonDioxide]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 20
		}
		OUTPUT_RESOURCE {
			ResourceName = LqdCO2
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdCO2]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_H2Condenser_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_H2Condenser_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_H2Condenser_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_H2Condenser_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = Hydrogen
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[Hydrogen]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 20
		}
		OUTPUT_RESOURCE {
			ResourceName = LqdHydrogen
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdHydrogen]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_CH4Condenser_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_CH4Condenser_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_CH4Condenser_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_CH4Condenser_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = Methane
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[Methane]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 20
		}
		OUTPUT_RESOURCE {
			ResourceName = LqdMethane
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdMethane]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_N2Condenser_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_N2Condenser_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_N2Condenser_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_N2Condenser_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = Nitrogen
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[Nitrogen]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 20
		}
		OUTPUT_RESOURCE {
			ResourceName = LqdNitrogen
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdNitrogen]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_O2Condenser_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_O2Condenser_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_O2Condenser_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_O2Condenser_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = Oxygen
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[Oxygen]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 20
		}
		OUTPUT_RESOURCE {
			ResourceName = LqdOxygen
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdOxygen]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	!MODULE[ModuleResourceConverter],0 {}
}

// Evaporators
@PART[rr_boxred_flat] {
	input = #$/MODULE[ModuleResourceConverter]:HAS[@INPUT_RESOURCE:HAS[#ResourceName[Ammonia]]/INPUT_RESOURCE:HAS[#ResourceName[LqdAmmonia]]/Ratio$
	@input *= #$@RESOURCE_DEFINITION[LqdAmmonia]/density$
	output = #$/MODULE[ModuleResourceConverter]:HAS[@INPUT_RESOURCE:HAS[#ResourceName[Ammonia]]/OUTPUT_RESOURCE:HAS[#ResourceName[Ammonia]]/Ratio$
	@output *= #$@RESOURCE_DEFINITION[Ammonia]/density$
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_NH3Evaporator_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_NH3Evaporator_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_NH3Evaporator_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_NH3Evaporator_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = LqdAmmonia
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdAmmonia]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 15
		}
		OUTPUT_RESOURCE {
			ResourceName = Ammonia
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[Ammonia]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_CO2Evaporator_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_CO2Evaporator_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_CO2Evaporator_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_CO2Evaporator_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = LqdCO2
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdCO2]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 30
		}
		OUTPUT_RESOURCE {
			ResourceName = CarbonDioxide
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[CarbonDioxide]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_H2Evaporator_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_H2Evaporator_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_H2Evaporator_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_H2Evaporator_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = LqdHydrogen
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdHydrogen]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 15
		}
		OUTPUT_RESOURCE {
			ResourceName = Hydrogen
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[Hydrogen]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_CH4Evaporator_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_CH4Evaporator_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_CH4Evaporator_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_CH4Evaporator_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = LqdMethane
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdMethane]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 15
		}
		OUTPUT_RESOURCE {
			ResourceName = Methane
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[Methane]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_N2Evaporator_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_N2Evaporator_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_N2Evaporator_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_N2Evaporator_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = LqdNitrogen
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdNitrogen]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 15
		}
		OUTPUT_RESOURCE {
			ResourceName = Nitrogen
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[Nitrogen]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	+MODULE[ModuleResourceConverter],0 {
		@ConverterName = #OrbitaLoc_ISRU_O2Evaporator_ConverterName
		@StartActionName = #OrbitaLoc_ISRU_O2Evaporator_StartActionName
		@StopActionName = #OrbitaLoc_ISRU_O2Evaporator_StopActionName
		@resourceOutputName = #OrbitaLoc_ISRU_O2Evaporator_resourceOutputName
		!INPUT_RESOURCE:HAS[#ResourceName[*]] {}
		!OUTPUT_RESOURCE:HAS[#ResourceName[*]] {}
		INPUT_RESOURCE {
			ResourceName = LqdOxygen
			Ratio = #$/input$
			@Ratio /= #$@RESOURCE_DEFINITION[LqdOxygen]/density$
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE {
			ResourceName = ElectricCharge
			Ratio = 15
		}
		OUTPUT_RESOURCE {
			ResourceName = Oxygen
			Ratio = #$/output$
			@Ratio /= #$@RESOURCE_DEFINITION[Oxygen]/density$
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}
	!MODULE[ModuleResourceConverter],0 {}
}