// Compatibility patches for RationalResourcesParts

// Convert Hydro Scoop
@PART[rr_hydroscoop_temp]:FOR[OrbitaKerbalism]:NEEDS[RationalResourcesParts] {
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[HydrogenPeroxide]/density$
		@ResourceName = HydrogenPeroxide
		@ConverterName = #OrbitaLoc_LqdScp_HydrogenPeroxide_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_HydrogenPeroxide_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_HydrogenPeroxide_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_HydrogenPeroxide_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[HydrogenPeroxide]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[Kerosene]/density$
		@ResourceName = Kerosene
		@ConverterName = #OrbitaLoc_LqdScp_Kerosene_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_Kerosene_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_Kerosene_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_Kerosene_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[Kerosene]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[LqdMethane]/density$
		@ResourceName = LqdMethane
		@ConverterName = #OrbitaLoc_LqdScp_LqdMethane_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_LqdMethane_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_LqdMethane_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_LqdMethane_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[LqdMethane]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[LqdOxygen]/density$
		@ResourceName = LqdOxygen
		@ConverterName = #OrbitaLoc_LqdScp_LqdOxygen_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_LqdOxygen_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_LqdOxygen_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_LqdOxygen_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[LqdOxygen]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	+MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		@Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		@Efficiency /= #$@RESOURCE_DEFINITION[Salts]/density$
		@ResourceName = Salts
		@ConverterName = #OrbitaLoc_LqdScp_Salts_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_Salts_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_Salts_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_Salts_ToggleActionName
	 	@INPUT_RESOURCE
	 	{
			@Ratio *= #$@RESOURCE_DEFINITION[Salts]/density$
			@Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	}
	}
	@MODULE[ModuleResourceHarvester]:HAS[#ResourceName[Water]] {
		// @Efficiency *= #$@RESOURCE_DEFINITION[Water]/density$
		// @Efficiency /= #$@RESOURCE_DEFINITION[Water]/density$
		// @ResourceName = Water
		@ConverterName = #OrbitaLoc_LqdScp_Water_ConverterName
		@StartActionName = #OrbitaLoc_LqdScp_Water_StartActionName
		@StopActionName = #OrbitaLoc_LqdScp_Water_StopActionName
		@ToggleActionName = #OrbitaLoc_LqdScp_Water_ToggleActionName
	 	// @INPUT_RESOURCE
	 	// {
			// @Ratio *= #$@RESOURCE_DEFINITION[Water]/density$
			// @Ratio /= #$@RESOURCE_DEFINITION[Water]/density$
	 	// }
	}
}

// Convert Exo Scoop
@PART[rr_exoscoop]:FOR[OrbiaKerbalism]:NEEDS[RationalResourcesParts] {
	@TechRequired = advScienceTech
	@entryCost = 29000
	@cost = 94000
	// @title = RR Particle Scoop
	// @manufacturer = Kenron
	// @description = Apparently someone went wild with a very large heap of discarded laundry baskets and a shed load of Copper wire. This device can generate a conical magnetic field modestly larger than its physical frame, enabling effective uptake of gaseous particles into the filtration system which then leads to the best part... refilling the tank.
	// @tags = helium hydrogen harvest scoop particle
	MODULE {
		name = ModuleSpaceDustHarvester
		PowerCost = #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/PowerCost$
		@PowerCost /= #$@PART[spacedust-atmosphere-processor-125-1]/MODULE[ModuleSpaceDustHarvester]/PowerCost$
		@PowerCost *= #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/PowerCost$
		HarvestType = Exosphere
		IntakeArea = #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeArea$
		@IntakeArea /= #$@PART[spacedust-atmosphere-processor-125-1]/MODULE[ModuleSpaceDustHarvester]/IntakeArea$
		@IntakeArea *= #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeArea$
		IntakeSpeedStatic = #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeSpeedStatic$
		@IntakeSpeedStatic /= #$@PART[spacedust-atmosphere-processor-125-1]/MODULE[ModuleSpaceDustHarvester]/IntakeSpeedStatic$
		@IntakeSpeedStatic *= #$@PART[spacedust-atmosphere-processor-25-1]/MODULE[ModuleSpaceDustHarvester]/IntakeSpeedStatic$
		IntakeVelocityScale {
		  key = 0 1
		}
		HARVESTED_RESOURCE {
			Name = Ammonia
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE[ArgonGas]:NEEDS[NearFuturePropulsion] {
			Name = ArgonGas
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = CarbonDioxide
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Hydrogen
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Methane
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Nitrogen
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Oxygen
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = Water
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
		HARVESTED_RESOURCE {
			Name = XenonGas
			BaseEfficiency = #$@ORBITA_VARIABLES/SpaceDust/atmoBaseEfficiency$
			MinHarvestValue = #$@ORBITA_VARIABLES/SpaceDust/atmoMinHarvestValue$
		}
	}
}

// Convert Metal Boosters
@PART[RREngineSRB_RT05,RREngineSRB_RT10]:NEEDS[RationalResourcesParts] {
	@MODULE[ModuleEnginesFX] {
		multiplier = #$@RESOURCE_DEFINITION[Metals]/density$
		@multiplier /= #$@RESOURCE_DEFINITION[Aluminium]/density$

		@PROPELLANT[Metals] {
			@name = Aluminium
			@ratio *= #$../multiplier$
		}
	}
	wetMass = #$/RESOURCE[Metals]/maxAmount$
	@wetMass *= #$@RESOURCE_DEFINITION[Metals]/density$
	@RESOURCE[Metals] {
		@name = Aluminium
		@amount = #$/wetMass$
		@amount /= #$@RESOURCE_DEFINITION[Aluminium]/density$
		@maxAmount = #$amount$
	}
}